theory ODoH begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: Expand/3, Extract/2, aead/3, aead_verify/3, decrypt/2,
           fst/1, h/1, hmac/1, pair/2, pk/1, sdec/2, senc/2, sign/2, snd/1,
           true/0, verify/3
equations:
    aead_verify(aead(k, p, a), a, k) = true,
    decrypt(aead(k, p, a), k) = p,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



restriction Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Neq_check_succeed:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

rule (modulo E) Starter:
   [ Fr( ~kxy ) ]
  --[ Channel( $X, $Y ) ]->
   [
   KeyExC( $X, $Y, ~kxy ), KeyExS( $X, $Y, ~kxy ),
   KeyExI( $X, $Y, ~kxy )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Generate_DH_key_pair:
   [ Fr( ~x ), Fr( ~key_id ) ]
  -->
   [
   !Pk( $A, ~key_id, 'g'^~x ), Out( <~key_id, 'g'^~x> ),
   !Ltk( $A, ~key_id, ~x )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_QueryGeneration:
   [
   KeyExC( $C, $P, ~k ), !Pk( $T, ~key_id, gy ), Fr( ~x ),
   Fr( ~msg_id ), Fr( ~connection_id ), Fr( ~q )
   ]
  --[
  Neq( $P, $T ),
  CQE_sources( ~msg_id, 'g'^~x,
               aead(Expand(Extract('blank', <'HPKE_05', 'eae_prk', gy^~x>),
                           <'32', 'HPKE_05', 'shared_secret', 'g'^~x, gy>, '32'),
                    ~q, <'32', ~key_id, '0x01'>)
  ),
  CQE( $C, $P, $T, ~connection_id, ~q, ~msg_id, 'g'^~x, gy, ~k )
  ]->
   [
   Out( senc(<~connection_id, $T, ~msg_id, ~key_id, '0x01', 'g'^~x, 
              aead(Expand(Extract('blank', <'HPKE_05', 'eae_prk', gy^~x>),
                          <'32', 'HPKE_05', 'shared_secret', 'g'^~x, gy>, '32'),
                   ~q, <'32', ~key_id, '0x01'>)
             >,
             ~k)
   ),
   C_ResponseHandler( ~q, $C, 'g'^~x, $P, ~k, $T, gy,
                      Expand(Extract('blank',
                                     <'HPKE_05', 'eae_prk', 
                                      Expand(Extract('blank', <'HPKE_05', 'eae_prk', gy^~x>),
                                             <'32', 'HPKE_05', 'shared_secret', 'g'^~x, gy>, '32')
                                     >),
                             <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                      ~msg_id
   )
   ]

  /*
  rule (modulo AC) C_QueryGeneration:
     [
     KeyExC( $C, $P, ~k ), !Pk( $T, ~key_id, gy ), Fr( ~x ),
     Fr( ~msg_id ), Fr( ~connection_id ), Fr( ~q )
     ]
    --[
    Neq( $P, $T ),
    CQE_sources( ~msg_id, 'g'^~x,
                 aead(Expand(Extract('blank', <'HPKE_05', 'eae_prk', z>),
                             <'32', 'HPKE_05', 'shared_secret', 'g'^~x, gy>, '32'),
                      ~q, <'32', ~key_id, '0x01'>)
    ),
    CQE( $C, $P, $T, ~connection_id, ~q, ~msg_id, 'g'^~x, gy, ~k )
    ]->
     [
     Out( senc(<~connection_id, $T, ~msg_id, ~key_id, '0x01', 'g'^~x, 
                aead(Expand(Extract('blank', <'HPKE_05', 'eae_prk', z>),
                            <'32', 'HPKE_05', 'shared_secret', 'g'^~x, gy>, '32'),
                     ~q, <'32', ~key_id, '0x01'>)
               >,
               ~k)
     ),
     C_ResponseHandler( ~q, $C, 'g'^~x, $P, ~k, $T, gy,
                        Expand(Extract('blank',
                                       <'HPKE_05', 'eae_prk', 
                                        Expand(Extract('blank', <'HPKE_05', 'eae_prk', z>),
                                               <'32', 'HPKE_05', 'shared_secret', 'g'^~x, gy>, '32')
                                       >),
                               <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                        ~msg_id
     )
     ]
    variants (modulo AC)
    1. ~x    = ~x.19
       gy    = gy.20
       z     = gy.20^~x.19
    
    2. ~x    = ~x.25
       gy    = z.32^inv(~x.25)
       z     = z.32
    
    3. ~x    = ~x.145
       gy    = x.279^x.280
       z     = x.279^(~x.145*x.280)
    
    4. ~x    = ~x.146
       gy    = x.281^inv((~x.146*x.282))
       z     = x.281^inv(x.282)
    
    5. ~x    = ~x.146
       gy    = x.281^(x.282*inv(~x.146))
       z     = x.281^x.282
    
    6. ~x    = ~x.147
       gy    = x.282^(x.283*inv((~x.147*x.284)))
       z     = x.282^(x.283*inv(x.284))
  */

rule (modulo E) P_HandleQuery:
   [
   KeyExS( $C, $P, ~k ),
   In( senc(<~connection_id, $T, msg_id, key_id, msg_type, gx, 
             opaque_message>,
            ~k)
   ),
   Fr( ~ptid ), In( key_id )
   ]
  --[ PHQ( msg_id, gx, opaque_message ), Eq( msg_type, '0x01' ) ]->
   [
   Out( <$T, msg_id, key_id, msg_type, gx, opaque_message> ),
   P_ResponseHandler( ~ptid, $C, $P, ~k, msg_id )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_HandleQuery:
   [
   In( <$T, msg_id, ~key_id, msg_type, gx, 
        aead(Expand(Extract('blank', <'HPKE_05', 'eae_prk', gx^~y>),
                    <'32', 'HPKE_05', 'shared_secret', gx, 'g'^~y>, '32'),
             query, <'32', ~key_id, '0x01'>)
       >
   ),
   !Ltk( $T, ~key_id, ~y ), Fr( ~ttid ), In( r )
   ]
  --[
  Eq( msg_type, '0x01' ),
  Eq( aead_verify(aead(Expand(Extract('blank',
                                      <'HPKE_05', 'eae_prk', gx^~y>),
                              <'32', 'HPKE_05', 'shared_secret', gx, 'g'^~y>, '32'),
                       query, <'32', ~key_id, '0x01'>),
                  <'32', ~key_id, '0x01'>,
                  Expand(Extract('blank', <'HPKE_05', 'eae_prk', gx^~y>),
                         <'32', 'HPKE_05', 'shared_secret', gx, 'g'^~y>, '32')),
      true
  ),
  T_Done( ~ttid, msg_id ), T_Answer( $T, query, r )
  ]->
   [
   Out( <msg_id, ~key_id, '0x02', 
         aead(Expand(Extract('blank',
                             <'HPKE_05', 'eae_prk', 
                              Expand(Extract('blank', <'HPKE_05', 'eae_prk', gx^~y>),
                                     <'32', 'HPKE_05', 'shared_secret', gx, 'g'^~y>, '32')
                             >),
                     <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
              r, <'32', ~key_id, '0x02'>)
        >
   )
   ]

  /*
  rule (modulo AC) T_HandleQuery:
     [
     In( <$T, msg_id, ~key_id, msg_type, gx, 
          aead(Expand(Extract('blank', <'HPKE_05', 'eae_prk', z>),
                      <'32', 'HPKE_05', 'shared_secret', gx, 'g'^~y>, '32'),
               query, <'32', ~key_id, '0x01'>)
         >
     ),
     !Ltk( $T, ~key_id, ~y ), Fr( ~ttid ), In( r )
     ]
    --[
    Eq( msg_type, '0x01' ), Eq( true, true ), T_Done( ~ttid, msg_id ),
    T_Answer( $T, query, r )
    ]->
     [
     Out( <msg_id, ~key_id, '0x02', 
           aead(Expand(Extract('blank',
                               <'HPKE_05', 'eae_prk', 
                                Expand(Extract('blank', <'HPKE_05', 'eae_prk', z>),
                                       <'32', 'HPKE_05', 'shared_secret', gx, 'g'^~y>, '32')
                               >),
                       <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                r, <'32', ~key_id, '0x02'>)
          >
     )
     ]
    variants (modulo AC)
    1. ~y    = ~y.16
       gx    = gx.17
       z     = gx.17^~y.16
    
    2. ~y    = ~y.24
       gx    = z.33^inv(~y.24)
       z     = z.33
    
    3. ~y    = ~y.238
       gx    = x.470^x.471
       z     = x.470^(~y.238*x.471)
    
    4. ~y    = ~y.239
       gx    = x.472^inv((~y.239*x.473))
       z     = x.472^inv(x.473)
    
    5. ~y    = ~y.239
       gx    = x.472^(x.473*inv(~y.239))
       z     = x.472^x.473
    
    6. ~y    = ~y.240
       gx    = x.473^(x.474*inv((~y.240*x.475)))
       z     = x.473^(x.474*inv(x.475))
  */

rule (modulo E) P_HandleResponse:
   [
   P_ResponseHandler( ~ptid, $C, $P, ~k, msg_id ),
   In( <msg_id, key_id, msg_type, opaque_message> )
   ]
  --[ P_Done( ~ptid, msg_id ), Eq( msg_type, '0x02' ) ]->
   [ Out( senc(<msg_id, key_id, msg_type, opaque_message>, ~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_HandleResponse:
   [
   C_ResponseHandler( ~query, $C, gx, $P, ~k, $T, gy, response_secret,
                      ~msg_id
   ),
   In( senc(<~msg_id, key_id, msg_type, 
             aead(response_secret, answer, <'32', key_id, '0x02'>)>,
            ~k)
   )
   ]
  --[
  Eq( msg_type, '0x02' ),
  Eq( aead_verify(aead(response_secret, answer,
                       <'32', key_id, '0x02'>),
                  <'32', key_id, '0x02'>, response_secret),
      true
  ),
  C_Done( ~query, answer, $C, gx, $T, gy )
  ]->
   [ ]

  /*
  rule (modulo AC) C_HandleResponse:
     [
     C_ResponseHandler( ~query, $C, gx, $P, ~k, $T, gy, response_secret,
                        ~msg_id
     ),
     In( senc(<~msg_id, key_id, msg_type, 
               aead(response_secret, answer, <'32', key_id, '0x02'>)>,
              ~k)
     )
     ]
    --[
    Eq( msg_type, '0x02' ), Eq( true, true ),
    C_Done( ~query, answer, $C, gx, $T, gy )
    ]->
     [ ]
  */

rule (modulo E) RevSK:
   [ KeyExI( $X, $Y, ~kxy ) ] --[ RevSk( ~kxy ) ]-> [ Out( ~kxy ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevDH:
   [ !Ltk( $A, ~key_id, ~x ) ]
  --[ RevDH( $A, ~key_id, 'g'^~x ) ]->
   [ Out( ~x ) ]

  /* has exactly the trivial AC variant */

lemma PHQ_source [sources]:
  all-traces
  "∀ mid gx op #j.
    (PHQ( mid, gx, op ) @ #j) ⇒
    ((∃ #i. (CQE_sources( mid, gx, op ) @ #i) ∧ (#i < #j)) ∨
     (((∃ #i. (!KU( mid ) @ #i) ∧ (#i < #j)) ∧
       (∃ #i. (!KU( gx ) @ #i) ∧ (#i < #j))) ∧
      (∃ #i. (!KU( op ) @ #i) ∧ (#i < #j))))"
/*
guarded formula characterizing all counter-examples:
"∃ mid gx op #j.
  (PHQ( mid, gx, op ) @ #j)
 ∧
  (∀ #i. (CQE_sources( mid, gx, op ) @ #i) ⇒ ¬(#i < #j)) ∧
  (((∀ #i. (!KU( mid ) @ #i) ⇒ ¬(#i < #j)) ∨
    (∀ #i. (!KU( gx ) @ #i) ⇒ ¬(#i < #j)) ∨
    (∀ #i. (!KU( op ) @ #i) ⇒ ¬(#i < #j))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #i. (!KU( mid ) @ #i) ⇒ ¬(#i < #j))  ∥
         (∀ #i. (!KU( gx ) @ #i) ⇒ ¬(#i < #j))  ∥
         (∀ #i. (!KU( op ) @ #i) ⇒ ¬(#i < #j)) )
    case case_1
    solve( (last(#j))  ∥
           (∃ #i.
             (CQE_sources( mid, gx, op ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j))  ∥
           ((∃ #i. (!KU( mid ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∃ #i. (!KU( gx ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∃ #i. (!KU( op ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j))) )
      case case_1
      solve( KeyExS( $C, $P, ~k ) ▶₀ #j )
        case Starter
        solve( !KU( senc(<~connection_id, $T, mid, key_id, '0x01', gx, op>,
                         ~k)
               ) @ #vk )
          case C_QueryGeneration
          by contradiction /* from formulas */
        next
          case P_HandleQuery_case_1
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case P_HandleQuery_case_2
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case P_HandleQuery_case_3
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            solve( (#vr.6, 0) ~~> (#vk, 0) )
              case d_0_decrypt
              by contradiction /* impossible chain */
            qed
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#j))  ∥
           (∃ #i.
             (CQE_sources( mid, gx, op ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j))  ∥
           ((∃ #i. (!KU( mid ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∃ #i. (!KU( gx ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∃ #i. (!KU( op ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j))) )
      case case_1
      solve( KeyExS( $C, $P, ~k ) ▶₀ #j )
        case Starter
        solve( !KU( senc(<~connection_id, $T, mid, key_id, '0x01', gx, op>,
                         ~k)
               ) @ #vk )
          case C_QueryGeneration
          by contradiction /* from formulas */
        next
          case P_HandleQuery_case_1
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case P_HandleQuery_case_2
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case P_HandleQuery_case_3
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            solve( (#vr.6, 0) ~~> (#vk, 0) )
              case d_0_decrypt
              by contradiction /* impossible chain */
            qed
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (last(#j))  ∥
           (∃ #i.
             (CQE_sources( mid, gx, op ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j))  ∥
           ((∃ #i. (!KU( mid ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∃ #i. (!KU( gx ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∃ #i. (!KU( op ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j))) )
      case case_1
      solve( KeyExS( $C, $P, ~k ) ▶₀ #j )
        case Starter
        solve( !KU( senc(<~connection_id, $T, mid, key_id, '0x01', gx, op>,
                         ~k)
               ) @ #vk )
          case C_QueryGeneration
          by contradiction /* from formulas */
        next
          case P_HandleQuery_case_1
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case P_HandleQuery_case_2
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case P_HandleQuery_case_3
          solve( (∃ #i.
                   (CQE_sources( msg_id, gx.1, opaque_message ) @ #i)
                  ∧
                   (¬(last(#i))) ∧ (#i < #vr.1))  ∥
                 ((∃ #i. (!KU( msg_id ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i. (!KU( gx.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1)) ∧
                  (∃ #i.
                    (!KU( opaque_message ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #vr.1))) )
            case case_1
            solve( (#vr.6, 0) ~~> (#vk, 0) )
              case d_0_decrypt
              by contradiction /* impossible chain */
            qed
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma end_to_end:
  exists-trace
  "∃ q a C gx T gy #i. C_Done( q, a, C, gx, T, gy ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ q a C gx T gy #i. (C_Done( q, a, C, gx, T, gy ) @ #i)"
*/
simplify
solve( C_ResponseHandler( ~query, $C, gx, $P, ~k, $T, gy,
                          response_secret, ~msg_id
       ) ▶₀ #i )
  case C_QueryGeneration
  solve( !KU( senc(<~msg_id, key_id, '0x02', 
                    aead(Expand(Extract('blank',
                                        <'HPKE_05', 'eae_prk', 
                                         Expand(Extract('blank',
                                                        <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                                <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1
                                                >,
                                                '32')
                                        >),
                                <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                         a, <'32', key_id, '0x02'>)
                   >,
                   ~k)
         ) @ #vk )
    case P_HandleResponse
    solve( !KU( aead(Expand(Extract('blank',
                                    <'HPKE_05', 'eae_prk', 
                                     Expand(Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                            <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>,
                                            '32')
                                    >),
                            <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                     a, <'32', key_id, '0x02'>)
           ) @ #vk.7 )
      case T_HandleQuery
      solve( !KU( senc(<~connection_id.1, $T.1, ~msg_id, key_id.1, 
                        '0x01', gx, opaque_message>,
                       ~k)
             ) @ #vk.9 )
        case C_QueryGeneration
        solve( !KU( aead(Expand(Extract('blank',
                                        <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32'),
                         query.1, <'32', ~key_id, '0x01'>)
               ) @ #vk.18 )
          case C_QueryGeneration
          by sorry
        next
          case P_HandleQuery
          solve( !KU( senc(<~connection_id.1, $T.1, ~msg_id, key_id.1, 
                            '0x01', 'g'^~x, 
                            aead(Expand(Extract('blank',
                                                <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                        <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32'),
                                 ~query, <'32', ~key_id, '0x01'>)
                           >,
                           ~k.1)
                 ) @ #vk.20 )
            case C_QueryGeneration
            solve( !KU( ~msg_id ) @ #vk.8 )
              case P_HandleQuery
              solve( !KU( senc(<~connection_id.1, $T.1, ~msg_id, key_id.1, 
                                '0x01', 'g'^~x, 
                                aead(Expand(Extract('blank',
                                                    <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                            <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>,
                                            '32'),
                                     ~query, <'32', ~key_id, '0x01'>)
                               >,
                               ~k.1)
                     ) @ #vk.20 )
                case C_QueryGeneration
                solve( !KU( ~key_id ) @ #vk.11 )
                  case C_QueryGeneration
                  by sorry
                next
                  case Generate_DH_key_pair
                  solve( !KU( 'g'^~x ) @ #vk.18 )
                    case P_HandleQuery
                    SOLVED // trace found
                  next
                    case c_exp
                    by sorry
                  qed
                qed
              next
                case c_senc
                by contradiction /* cyclic */
              qed
            qed
          next
            case c_senc
            by contradiction /* cyclic */
          qed
        next
          case c_aead
          by sorry
        qed
      next
        case c_senc
        by sorry
      qed
    next
      case c_aead
      by sorry
    qed
  next
    case c_senc
    by sorry
  qed
qed

lemma secret_query:
  all-traces
  "∀ C P T cid q msg_id gx gy key #j #k.
    ((CQE( C, P, T, cid, q, msg_id, gx, gy, key ) @ #j) ∧
     (!KU( q ) @ #k)) ⇒
    (∃ A kid gz #i.
      ((RevDH( A, kid, gz ) @ #i) ∧
       (((A = C) ∧ (gz = gx)) ∨ ((A = T) ∧ (gz = gy)))) ∧
      (#i < #k))"
/*
guarded formula characterizing all counter-examples:
"∃ C P T cid q msg_id gx gy key #j #k.
  (CQE( C, P, T, cid, q, msg_id, gx, gy, key ) @ #j) ∧
  (!KU( q ) @ #k)
 ∧
  ∀ A kid gz #i.
   (RevDH( A, kid, gz ) @ #i)
  ⇒
   (((((¬(A = C)) ∨ (¬(gz = gx)))) ∧ (((¬(A = T)) ∨ (¬(gz = gy))))) ∨
    (¬(#i < #k)))"
*/
simplify
solve( KeyExC( $C, $P, ~k ) ▶₀ #j )
  case Starter
  solve( !Pk( $T, ~key_id, gy ) ▶₁ #j )
    case Generate_DH_key_pair
    solve( !KU( ~q ) @ #k.1 )
      case C_QueryGeneration
      solve( !KU( 'g'^(~x*~x.1) ) @ #vk.16 )
        case C_QueryGeneration
        solve( !KU( ~x ) @ #vk.17 )
          case RevDH
          by contradiction /* from formulas */
        qed
      next
        case Generate_DH_key_pair
        by solve( !KU( ~x.1 ) @ #vk.17 )
      next
        case c_exp
        solve( !KU( ~x ) @ #vk.19 )
          case RevDH
          by contradiction /* from formulas */
        qed
      qed
    next
      case P_HandleQuery
      solve( !KU( 'g'^(~x*~x.1) ) @ #vk.17 )
        case Generate_DH_key_pair
        by solve( !KU( ~x.1 ) @ #vk.18 )
      next
        case P_HandleQuery
        solve( !KU( ~x ) @ #vk.18 )
          case RevDH
          by contradiction /* from formulas */
        qed
      next
        case c_exp
        solve( !KU( ~x ) @ #vk.20 )
          case RevDH
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma secret_cid:
  all-traces
  "∀ C P T cid q msg_id gx gy key #j #k.
    ((CQE( C, P, T, cid, q, msg_id, gx, gy, key ) @ #j) ∧
     (!KU( cid ) @ #k)) ⇒
    (∃ #i. (RevSk( key ) @ #i) ∧ (#i < #k))"
/*
guarded formula characterizing all counter-examples:
"∃ C P T cid q msg_id gx gy key #j #k.
  (CQE( C, P, T, cid, q, msg_id, gx, gy, key ) @ #j) ∧
  (!KU( cid ) @ #k)
 ∧
  ∀ #i. (RevSk( key ) @ #i) ⇒ ¬(#i < #k)"
*/
simplify
solve( KeyExC( $C, $P, ~k ) ▶₀ #j )
  case Starter
  solve( !Pk( $T, ~key_id, gy ) ▶₁ #j )
    case Generate_DH_key_pair
    solve( !KU( ~connection_id ) @ #k.1 )
      case C_QueryGeneration
      solve( !KU( ~k ) @ #vk )
        case RevSK
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma query_binding:
  all-traces
  "∀ C P T cid q msg_id gx gy key #j #k #l.
    (((CQE( C, P, T, cid, q, msg_id, gx, gy, key ) @ #j) ∧
      (!KU( q ) @ #k)) ∧
     (!KU( cid ) @ #l)) ⇒
    (∃ A kid gz #h #i.
      ((((RevDH( A, kid, gz ) @ #i) ∧
         (((A = C) ∧ (gz = gx)) ∨ ((A = T) ∧ (gz = gy)))) ∧
        (#i < #k)) ∧
       (RevSk( key ) @ #h)) ∧
      (#h < #l))"
/*
guarded formula characterizing all counter-examples:
"∃ C P T cid q msg_id gx gy key #j #k #l.
  (CQE( C, P, T, cid, q, msg_id, gx, gy, key ) @ #j) ∧
  (!KU( q ) @ #k) ∧
  (!KU( cid ) @ #l)
 ∧
  ∀ A kid gz #h #i.
   (RevDH( A, kid, gz ) @ #i) ∧ (RevSk( key ) @ #h)
  ⇒
   (((((¬(A = C)) ∨ (¬(gz = gx)))) ∧ (((¬(A = T)) ∨ (¬(gz = gy))))) ∨
    (¬(#i < #k)) ∨
    (¬(#h < #l)))"
*/
simplify
solve( KeyExC( $C, $P, ~k ) ▶₀ #j )
  case Starter
  solve( !Pk( $T, ~key_id, gy ) ▶₁ #j )
    case Generate_DH_key_pair
    solve( !KU( ~connection_id ) @ #l )
      case C_QueryGeneration
      solve( !KU( ~k ) @ #vk )
        case RevSK
        solve( !KU( ~q ) @ #k.1 )
          case C_QueryGeneration
          solve( !KU( 'g'^(~x*~x.1) ) @ #vk.16 )
            case C_QueryGeneration
            solve( !KU( ~x ) @ #vk.17 )
              case RevDH
              by contradiction /* from formulas */
            qed
          next
            case Generate_DH_key_pair
            by solve( !KU( ~x.1 ) @ #vk.17 )
          next
            case c_exp
            solve( !KU( ~x ) @ #vk.19 )
              case RevDH
              by contradiction /* from formulas */
            qed
          qed
        next
          case P_HandleQuery
          solve( !KU( 'g'^(~x*~x.1) ) @ #vk.18 )
            case Generate_DH_key_pair
            by solve( !KU( ~x.1 ) @ #vk.19 )
          next
            case P_HandleQuery
            solve( !KU( ~x ) @ #vk.19 )
              case RevDH
              by contradiction /* from formulas */
            qed
          next
            case c_exp
            solve( !KU( ~x ) @ #vk.21 )
              case RevDH
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma consistency:
  all-traces
  "∀ q a C gx T gy #j.
    (C_Done( q, a, C, gx, T, gy ) @ #j) ⇒
    ((∃ #i. (T_Answer( T, q, a ) @ #i) ∧ (#i < #j)) ∨
     (∃ A kid gz #i.
       ((RevDH( A, kid, gz ) @ #i) ∧
        (((A = C) ∧ (gz = gx)) ∨ ((A = T) ∧ (gz = gy)))) ∧
       (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ q a C gx T gy #j.
  (C_Done( q, a, C, gx, T, gy ) @ #j)
 ∧
  (∀ #i. (T_Answer( T, q, a ) @ #i) ⇒ ¬(#i < #j)) ∧
  (∀ A kid gz #i.
    (RevDH( A, kid, gz ) @ #i)
   ⇒
    (((((¬(A = C)) ∨ (¬(gz = gx)))) ∧ (((¬(A = T)) ∨ (¬(gz = gy))))) ∨
     (¬(#i < #j))))"
*/
simplify
solve( C_ResponseHandler( ~query, $C, gx, $P, ~k, $T, gy,
                          response_secret, ~msg_id
       ) ▶₀ #j )
  case C_QueryGeneration
  solve( !KU( senc(<~msg_id, key_id, '0x02', 
                    aead(Expand(Extract('blank',
                                        <'HPKE_05', 'eae_prk', 
                                         Expand(Extract('blank',
                                                        <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                                <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1
                                                >,
                                                '32')
                                        >),
                                <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                         a, <'32', key_id, '0x02'>)
                   >,
                   ~k)
         ) @ #vk )
    case P_HandleResponse
    solve( !KU( aead(Expand(Extract('blank',
                                    <'HPKE_05', 'eae_prk', 
                                     Expand(Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                            <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>,
                                            '32')
                                    >),
                            <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                     a, <'32', key_id, '0x02'>)
           ) @ #vk.7 )
      case T_HandleQuery
      solve( !KU( aead(Expand(Extract('blank',
                                      <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                              <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32'),
                       query.1, <'32', ~key_id, '0x01'>)
             ) @ #vk.19 )
        case C_QueryGeneration
        by contradiction /* from formulas */
      next
        case P_HandleQuery
        by contradiction /* from formulas */
      next
        case c_aead
        solve( !KU( Expand(Extract('blank',
                                   <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                           <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
               ) @ #vk.22 )
          case c_Expand
          solve( !KU( Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>)
                 ) @ #vk.28 )
            case c_Extract
            solve( !KU( 'g'^(~x*~x.1) ) @ #vk.38 )
              case C_QueryGeneration
              solve( !KU( ~x.1 ) @ #vk.40 )
                case RevDH
                by contradiction /* from formulas */
              qed
            next
              case Generate_DH_key_pair
              by solve( !KU( ~x ) @ #vk.39 )
            next
              case P_HandleQuery
              solve( !KU( ~x.1 ) @ #vk.41 )
                case RevDH
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~x ) @ #vk.41 )
            qed
          qed
        qed
      qed
    next
      case c_aead
      solve( !KU( Expand(Extract('blank',
                                 <'HPKE_05', 'eae_prk', 
                                  Expand(Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                         <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
                                 >),
                         <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32')
             ) @ #vk.11 )
        case c_Expand
        solve( !KU( Extract('blank',
                            <'HPKE_05', 'eae_prk', 
                             Expand(Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                    <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
                            >)
               ) @ #vk.16 )
          case c_Extract
          solve( !KU( Expand(Extract('blank',
                                     <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                             <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
                 ) @ #vk.26 )
            case c_Expand
            solve( !KU( Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>)
                   ) @ #vk.30 )
              case c_Extract
              solve( !KU( 'g'^(~x*~x.1) ) @ #vk.36 )
                case C_QueryGeneration
                solve( !KU( ~x.1 ) @ #vk.38 )
                  case RevDH
                  by contradiction /* from formulas */
                qed
              next
                case Generate_DH_key_pair
                by solve( !KU( ~x ) @ #vk.37 )
              next
                case P_HandleQuery
                solve( !KU( ~x.1 ) @ #vk.39 )
                  case RevDH
                  by contradiction /* from formulas */
                qed
              next
                case c_exp
                by solve( !KU( ~x ) @ #vk.39 )
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case c_senc
    solve( !KU( aead(Expand(Extract('blank',
                                    <'HPKE_05', 'eae_prk', 
                                     Expand(Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                            <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>,
                                            '32')
                                    >),
                            <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32'),
                     a, <'32', key_id, '0x02'>)
           ) @ #vk.8 )
      case T_HandleQuery
      solve( !KU( aead(Expand(Extract('blank',
                                      <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                              <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32'),
                       query.1, <'32', ~key_id, '0x01'>)
             ) @ #vk.18 )
        case C_QueryGeneration
        by contradiction /* from formulas */
      next
        case P_HandleQuery
        by contradiction /* from formulas */
      next
        case c_aead
        solve( !KU( Expand(Extract('blank',
                                   <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                           <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
               ) @ #vk.21 )
          case c_Expand
          solve( !KU( Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>)
                 ) @ #vk.27 )
            case c_Extract
            solve( !KU( 'g'^(~x*~x.1) ) @ #vk.37 )
              case C_QueryGeneration
              solve( !KU( ~x.1 ) @ #vk.38 )
                case RevDH
                by contradiction /* from formulas */
              qed
            next
              case Generate_DH_key_pair
              by solve( !KU( ~x ) @ #vk.38 )
            next
              case P_HandleQuery
              solve( !KU( ~x.1 ) @ #vk.40 )
                case RevDH
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              by solve( !KU( ~x ) @ #vk.40 )
            qed
          qed
        qed
      qed
    next
      case c_aead
      solve( !KU( Expand(Extract('blank',
                                 <'HPKE_05', 'eae_prk', 
                                  Expand(Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                         <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
                                 >),
                         <'32', 'HPKE_05', 'shared_secret', 'odoh_response'>, '32')
             ) @ #vk.10 )
        case c_Expand
        solve( !KU( Extract('blank',
                            <'HPKE_05', 'eae_prk', 
                             Expand(Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                                    <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
                            >)
               ) @ #vk.15 )
          case c_Extract
          solve( !KU( Expand(Extract('blank',
                                     <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>),
                             <'32', 'HPKE_05', 'shared_secret', 'g'^~x, 'g'^~x.1>, '32')
                 ) @ #vk.25 )
            case c_Expand
            solve( !KU( Extract('blank', <'HPKE_05', 'eae_prk', 'g'^(~x*~x.1)>)
                   ) @ #vk.29 )
              case c_Extract
              solve( !KU( 'g'^(~x*~x.1) ) @ #vk.35 )
                case C_QueryGeneration
                solve( !KU( ~x.1 ) @ #vk.36 )
                  case RevDH
                  by contradiction /* from formulas */
                qed
              next
                case Generate_DH_key_pair
                by solve( !KU( ~x ) @ #vk.36 )
              next
                case P_HandleQuery
                solve( !KU( ~x.1 ) @ #vk.38 )
                  case RevDH
                  by contradiction /* from formulas */
                qed
              next
                case c_exp
                by solve( !KU( ~x ) @ #vk.38 )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end